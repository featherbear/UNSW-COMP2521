<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on COMP2521 Summer Fun</title><link>/post/</link><description>Recent content in Posts on COMP2521 Summer Fun</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Andrew Wong (z5206677)</copyright><lastBuildDate>Tue, 29 Jan 2019 14:35:02 +1100</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Lecture 14 - Hashing</title><link>/post/lec14/</link><pubDate>Tue, 29 Jan 2019 14:35:02 +1100</pubDate><guid>/post/lec14/</guid><description>http://cr.</description></item><item><title>Lab 7 - Quick Sort Detective</title><link>/post/lab07/</link><pubDate>Mon, 28 Jan 2019 19:56:24 +1100</pubDate><guid>/post/lab07/</guid><description>Resources:</description></item><item><title>Lecture 13 - Splay Trees, 2-3-4 Trees, Redblack Trees</title><link>/post/lec13/</link><pubDate>Thu, 24 Jan 2019 10:27:48 +1100</pubDate><guid>/post/lec13/</guid><description>Splay Trees Amortisation is the process of decreasing the average cost of an operation.</description></item><item><title>Lecture 12 - Balanced Trees</title><link>/post/lec12/</link><pubDate>Tue, 22 Jan 2019 14:42:56 +1100</pubDate><guid>/post/lec12/</guid><description>A tree is weight balanced if: (size(l) - height(r)| &amp;lt; 2</description></item><item><title>Lecture 10 - More sorting!</title><link>/post/lec10/</link><pubDate>Thu, 17 Jan 2019 10:20:58 +1100</pubDate><guid>/post/lec10/</guid><description>Sorted Merge</description></item><item><title>Lab 6 - Sort Detective Report</title><link>/post/lab06/</link><pubDate>Tue, 15 Jan 2019 18:19:48 +1100</pubDate><guid>/post/lab06/</guid><description>Lol well this was all wrong xd but das okay</description></item><item><title>Lecture 9 - Sorting</title><link>/post/lec09/</link><pubDate>Tue, 15 Jan 2019 14:19:20 +1100</pubDate><guid>/post/lec09/</guid><description>Sorting is arranging a collection of items in order, based on some key</description></item><item><title>Class Exam 1</title><link>/post/test01/</link><pubDate>Thu, 10 Jan 2019 12:00:00 +1100</pubDate><guid>/post/test01/</guid><description>Had my first practice exam for COMP2521 this week!</description></item><item><title>Tutorial Five</title><link>/post/tut05/</link><pubDate>Tue, 08 Jan 2019 17:09:10 +1100</pubDate><guid>/post/tut05/</guid><description>Traversal Pseudocode</description></item><item><title>Lecture 8 - Directed and Weighted Graphs</title><link>/post/lec08/</link><pubDate>Tue, 08 Jan 2019 14:00:00 +1100</pubDate><guid>/post/lec08/</guid><description>Directed Graphs undirected graphs - an edge relates two vertices equivalently directed graphs - only one direction | self loops!</description></item><item><title>Tutorial Four - Heaps and Graphs</title><link>/post/tut04/</link><pubDate>Thu, 03 Jan 2019 14:10:18 +1100</pubDate><guid>/post/tut04/</guid><description>Heaps Heaps are a form of data representation, often for priority queues - where the max (or min) value is at the top of the tree</description></item><item><title>Assignment Two - Fury of Dracula</title><link>/post/ass02/</link><pubDate>Thu, 03 Jan 2019 10:25:05 +1100</pubDate><guid>/post/ass02/</guid><description>The second assignment of this course was a group assignment to make a game parser, as well as an AI to the game.</description></item><item><title>Lecture 7 - Paths and Tours</title><link>/post/lec07/</link><pubDate>Thu, 03 Jan 2019 10:00:00 +1100</pubDate><guid>/post/lec07/</guid><description>A Hamilton Path visits every vertice once</description></item><item><title>Lecture 6 - Graph Representations and Graph Search</title><link>/post/lec06/</link><pubDate>Thu, 13 Dec 2018 10:00:10 +1100</pubDate><guid>/post/lec06/</guid><description>Graph Representation</description></item><item><title>Tutorial Three</title><link>/post/tut03/</link><pubDate>Tue, 11 Dec 2018 17:19:30 +1100</pubDate><guid>/post/tut03/</guid><description>This tutorial inspected the time costs for different algorithm complexities</description></item><item><title>Lecture 5 - Priority Queues and Graphs</title><link>/post/lec05/</link><pubDate>Tue, 11 Dec 2018 14:45:10 +1100</pubDate><guid>/post/lec05/</guid><description>Binary Heaps can be used as priority queues, as the root of a binary tree is always the largest/highest value.</description></item><item><title>Lecture 4 - Applications of Recursion</title><link>/post/lec04/</link><pubDate>Thu, 06 Dec 2018 10:16:32 +1100</pubDate><guid>/post/lec04/</guid><description>Recursive Linked Lists Drop a list 1 2 3 4 5 void list_drop_recursive(node *curr) { if (curr == NULL) return; list_drop_recursive(curr-&amp;gt;next); free(curr); } Delete a node from a list 1 2 3 4 5 6 7 8 9 10 void list_delete_recursive(node *curr, node *it) { if (curr == NULL) return NULL; if (curr == it) { node next = curr-&amp;gt;next; free(curr); return next; } curr-&amp;gt;next = list_delete_node(curr-&amp;gt;next, it); return curr; } Max value in an array (Divide and Conquer) Iterative approach Complexity: O(n)</description></item><item><title>fibonacci.c</title><link>/post/c-fibonacci/</link><pubDate>Wed, 05 Dec 2018 17:13:11 +1100</pubDate><guid>/post/c-fibonacci/</guid><description>The fibonacci function is a great (or horrible) way to demonstrate the pros and cons of iterative and recursive approaches</description></item><item><title>Binary Heaps</title><link>/post/binary-heaps/</link><pubDate>Tue, 04 Dec 2018 14:40:39 +1100</pubDate><guid>/post/binary-heaps/</guid><description>Binary Heaps A binary heap is similar to a binary search tree.</description></item><item><title>Binary Trees</title><link>/post/binary-trees/</link><pubDate>Tue, 04 Dec 2018 14:40:39 +1100</pubDate><guid>/post/binary-trees/</guid><description>In programming, a tree is an efficient system of storing data.</description></item><item><title>Graphs</title><link>/post/graphs/</link><pubDate>Tue, 04 Dec 2018 14:40:39 +1100</pubDate><guid>/post/graphs/</guid><description>A graph is a collection type where each node knows of its related nodes.</description></item><item><title>Searching Algorithms</title><link>/post/searchingalgorithms/</link><pubDate>Tue, 04 Dec 2018 14:40:39 +1100</pubDate><guid>/post/searchingalgorithms/</guid><description>Linear Search Searches from 0 to n-1 (linearly)</description></item><item><title>Lecture 3 - Algorithms</title><link>/post/lec03/</link><pubDate>Tue, 04 Dec 2018 14:14:06 +1100</pubDate><guid>/post/lec03/</guid><description>Complexity Factors that affect good programs Environment the Operating System the Compiler the Hardware Implementation the Algorithm (our code) Testing Empirical testing of the efficiency of algorithms</description></item><item><title>Assignment One - Textbuffer</title><link>/post/ass01/</link><pubDate>Fri, 30 Nov 2018 18:33:40 +1100</pubDate><guid>/post/ass01/</guid><description>Questions Having a look at textbuffer.</description></item><item><title>Lecture 2 - Abstraction</title><link>/post/lec02/</link><pubDate>Thu, 29 Nov 2018 10:11:01 +1100</pubDate><guid>/post/lec02/</guid><description>Abstraction Abstraction is the concept of taking a step back from something, and providing a wider overview.</description></item><item><title>Tutorial One</title><link>/post/tut01/</link><pubDate>Tue, 27 Nov 2018 17:05:45 +1100</pubDate><guid>/post/tut01/</guid><description>this is my name</description></item><item><title>Lecture 1</title><link>/post/lec01/</link><pubDate>Tue, 27 Nov 2018 14:00:00 +1100</pubDate><guid>/post/lec01/</guid><description>PSA: A new compiler has entered the game Okay not really, it&amp;rsquo;s the lecturer&amp;rsquo;s wrapper for clang, which has pretty love messages (error messages in red) when things go wrong.</description></item></channel></rss>